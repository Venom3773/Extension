function tokenize(input) {
  return input
    .toLowerCase()
    .replace(/[^a-z0-9áéíóúñü\'\’ ]/g, '')
    .replace(/(?:https?):\/\/[\n\S]+/g, '')
    .replace(/[\'|\’]([a-z0-9áéíóúñü]+)/g, ' $1 ')
    .trim()
    .split(/[\s+]/);
}

var LanguageProcessor = (function () {
  function LanguageProcessor() {
    this.languages = {
      en: {
        labels: {
          "happy": 3, "joy": 3.2, "pleased": 2.5, "content": 2, "glad": 2.3, "delight": 3.1, "cheer": 2.7,
          "excited": 2.8, "thrilled": 3, "satisfied": 2.4, "elated": 3.3, "overjoyed": 3.5, "amused": 2.2,
          "sad": -3, "unhappy": -2.5, "depressed": -3.2, "miserable": -3.4, "downcast": -2.3, "gloomy": -2.7,
          "sorrow": -3, "melancholy": -2.8, "upset": -2.4, "devastated": -3.5, "grief": -3.3, "blue": -2.6,
          "great": 3, "excellent": 3.1, "fantastic": 3.2, "awesome": 3, "superb": 2.8, "wonderful": 3.1,
          "amazing": 3.3, "brilliant": 3.2, "perfect": 3, "outstanding": 2.9, "stellar": 3, "fabulous": 2.7,
          "bad": -2, "poor": -2.2, "terrible": -3, "awful": -3.1, "horrible": -3, "dreadful": -2.8,
          "lousy": -2.5, "rotten": -2.7, "atrocious": -3.2, "disappointing": -2.4, "subpar": -2.3,
          "love": 3, "adore": 3.2, "like": 2, "enjoy": 2.5, "cherish": 2.7, "appreciate": 2.3, "fond": 2.1,
          "hate": -3, "despise": -3.2, "dislike": -2, "loathe": -3.1, "detest": -3, "abhor": -2.9,
          "success": 2.5, "win": 2.3, "triumph": 3, "achieve": 2.2, "victory": 2.7, "accomplish": 2.4,
          "fail": -2, "lose": -2.3, "defeat": -2.5, "collapse": -3, "flop": -2.4, "falter": -2.2,
          "good": 2, "fine": 1.5, "okay": 1, "decent": 1.7, "satisfactory": 1.8, "positive": 2,
          "negative": -2, "stable": 1, "calm": 1.2, "steady": 1.3, "volatile": -1.5, "chaos": -2,
          "hope": 2, "optimism": 2.5, "confidence": 2.3, "fear": -2, "worry": -2.2, "anxiety": -2.5,
          "profit": 2.5, "gain": 2.3, "rise": 2.2, "bullish": 3, "strong": 2.4, "growth": 2.6, "rally": 2.5,
          "surge": 2.7, "increase": 2.2, "soar": 3, "boom": 2.8, "beat": 2.5, "outperform": 3,
          "record": 2.3, "high": 2.2, "rebound": 2.4, "acquire": 1.8, "merge": 1.7, "dividend": 1.6,
          "expand": 2, "breakthrough": 2.7, "innovate": 2.5, "upgrade": 2.3, "peak": 2.2, "climb": 2.1,
          "advance": 2, "prosper": 2.6, "thrive": 3, "secure": 2.2, "boost": 2.4, "improve": 2.3,
          "solid": 2, "robust": 2.5, "flourish": 2.7, "benefit": 2.2, "progress": 2.3, "escalate": 2,
          "elevate": 2.1, "strengthen": 2.4, "flourishing": 2.6, "lucrative": 2.8, "promising": 2.5,
          "loss": -2.5, "drop": -2.3, "fall": -2.2, "bearish": -3, "weak": -2.4, "decline": -2.6, "crash": -3,
          "plunge": -2.7, "decrease": -2.2, "slump": -2.5, "miss": -2.5, "underperform": -3, "low": -2.2,
          "tumble": -2.4, "dip": -1.8, "sell": -1.7, "down": -1.9, "volatile": -1.5, "negative": -2,
          "bankrupt": -3, "split": -1.5, "cut": -1.8, "layoff": -2.2, "risk": -1.6, "uncertain": -1.7,
          "downgrade": -2.3, "slide": -2.2, "retreat": -2, "stumble": -2.1, "struggle": -2, "worry": -2,
          "damage": -2.3, "setback": -2.5, "crisis": -3, "trouble": -2.2, "threat": -2, "deteriorate": -2.4,
          "weaken": -2.3, "plummet": -2.8, "stall": -2, "burden": -2.1, "challenge": -1.9,
          "earnings": 0.8, "revenue": 0.7, "report": 0, "announce": 0, "shares": 0, "market": 0,
          "stock": 0, "trade": 0, "price": 0, "value": 0, "volume": 0, "trend": 0, "data": 0,
          "news": 0, "update": 0, "forecast": 0, "outlook": 0, "estimate": 0, "business": 0,
          "company": 0, "industry": 0, "sector": 0, "performance": 0, "results": 0, "deal": 0,
          "activity": 0, "change": 0, "move": 0, "shift": 0, "development": 0
        },
        scoringStrategy: function (tokens, cursor, tokenScore) {
          return tokenScore;
        }
      }
    };
  }
  LanguageProcessor.prototype.addLanguage = function (languageCode, language) {
    var lang = language;
    if (!lang.hasOwnProperty('scoringStrategy')) {
      lang.scoringStrategy = function (tokens, cursor, tokenScore) {
        return tokenScore;
      };
    }
    this.languages[languageCode] = lang;
  };
  LanguageProcessor.prototype.getLabels = function (languageCode) {
    if (!this.languages.hasOwnProperty(languageCode)) {
      throw new Error("Language not supported: " + languageCode);
    }
    return this.languages[languageCode].labels;
  };
  LanguageProcessor.prototype.applyScoringStrategy = function (languageCode, tokens, cursor, tokenScore) {
    if (!this.languages.hasOwnProperty(languageCode)) {
      throw new Error("Language not supported: " + languageCode);
    }
    return this.languages[languageCode].scoringStrategy(tokens, cursor, tokenScore);
  };
  return LanguageProcessor;
})();
var languageProcessor = new LanguageProcessor();

var Sentiment = (function () {
  function Sentiment(options) {
    this.options = options;
  }
  Sentiment.prototype.registerLanguage = function (languageCode, language) {
    languageProcessor.addLanguage(languageCode, language);
  };
  Sentiment.prototype.analyze = function (phrase, opts, callback) {
    if (typeof phrase === 'undefined') phrase = '';
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var languageCode = opts.language || 'en';
    var labels = languageProcessor.getLabels(languageCode);
    if (typeof opts.extras === 'object') {
      labels = Object.assign(labels, opts.extras);
    }
    var tokens = tokenize(phrase), score = 0, words = [], positive = [], negative = [], calculation = [];
    var i = tokens.length;
    while (i--) {
      var obj = tokens[i];
      if (!labels.hasOwnProperty(obj)) continue;
      words.push(obj);
      var tokenScore = labels[obj];
      tokenScore = languageProcessor.applyScoringStrategy(languageCode, tokens, i, tokenScore);
      if (tokenScore > 0) positive.push(obj);
      else if (tokenScore < 0) negative.push(obj);
      score += tokenScore;
      var zipObj = {};
      zipObj[obj] = tokenScore;
      calculation.push(zipObj);
    }
    var result = {
      score: score,
      comparative: tokens.length > 0 ? score / tokens.length : 0,
      calculation: calculation,
      tokens: tokens,
      words: words,
      positive: positive,
      negative: negative
    };
    if (typeof callback === 'function') {
      callback(null, result);
    } else {
      return result;
    }
  };
  return Sentiment;
})();
